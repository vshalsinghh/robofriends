{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","components/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","Cardlist","robots","map","user","i","components_Card","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","erroe","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Searchbox","components_Scroll","components_ErrorBoundary","components_Cardlist","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","components_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.82bc9170.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\t\r\n\r\n\treturn(\r\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n\t\t\t\t<img alt= 'robots'  src={`https://robohash.org/${id}?size=200x200`}  />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2> {name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n\t\r\n\t\r\n\r\nreturn(\r\n\t<div>\r\n\t{robots.map( (user,i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i}\r\n\t\t id={robots[i].id}\r\n\t\t name={ robots[i].name} \r\n\t\t email={ robots[i].email} \r\n\t\t />\r\n\t\t );\r\n\t})}\r\n\t\t\r\n\t</div>\r\n\t);\r\n\t\r\n\r\n}\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'> \r\n\t\t<input className ='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search Robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\nexport default Searchbox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border:'5px solid black',height:'500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(erroe,info){\r\n\t\tthis.setState({hasError:true})\r\n\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn<h1> OOps An Error Occured</h1>\r\n\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t\t\t\r\n\t}\r\n \r\n}\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Cardlist from './Cardlist';\r\nimport Searchbox from './Searchbox'; \r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport './app.css';\r\n\r\nimport { setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn{\r\n\t\t\tsearchField: state.searchRobots.searchField,\r\n\t\t\trobots: state.requestRobots.robots,\r\n\t\t\tisPending:state.requestRobots.isPending,\r\n\t\t\terror: state.requestRobots.error\r\n\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn  {\t\r\n\t\tonSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () =>dispatch( requestRobots())\r\n}}\r\n\r\nclass App extends Component{\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\t// onSearchChange=(event) => {\r\n\t// \tthis.setState({ searchfield : event.target.value })\r\n\t\t\t\r\n\t// }\r\n\r\n\trender(){\r\n\t\t\r\n\t\tconst {searchField, onSearchChange , robots, isPending } =this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ? <h1> LOADING....</h1> :\r\n\t\t (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robo Friends</h1>\r\n\t\t\t\t<Searchbox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<Cardlist robots={filteredRobots} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t\r\n\t}\r\n\t\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)( App);"," import {\r\n \tCHANGE_SEARCH_FIELD, \r\n \t REQUEST_ROBOTS_PENDING,\r\n \t REQUEST_ROBOTS_SUCCESS,\r\n \t REQUEST_ROBOTS_FAILED\r\n \t} from './constants.js'\r\n\r\n export const setSearchField = (text) => ({\r\n \ttype : CHANGE_SEARCH_FIELD ,\r\n \tpayload: text\r\n\t\t })\r\n export const requestRobots = () => (dispatch) => {\r\n \tdispatch({ type: REQUEST_ROBOTS_PENDING})\r\n \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then( data => dispatch({ type:REQUEST_ROBOTS_SUCCESS, payload:data }) )\r\n\t\t.catch(error => dispatch({ type:REQUEST_ROBOTS_FAILED, payload:error }) )\r\n\r\n \t\r\n }\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"," import {\r\n \tCHANGE_SEARCH_FIELD, \r\n \t REQUEST_ROBOTS_PENDING,\r\n \t REQUEST_ROBOTS_SUCCESS,\r\n \t REQUEST_ROBOTS_FAILED\r\n \t} from './constants.js'\r\n\r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action= {}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\treturn Object.assign({},state,{ searchField:action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({} , state , { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots:action.payload, isPending:false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error:action.payload, isPending: false })\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {createStore , applyMiddleware,combineReducers } from 'redux';\nimport {createLogger} from  'redux-logger'\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots , requestRobots})\nconst store = createStore(rootReducer ,applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}